/////////////////////////////////////////////////////////////////////////////
////    copyright (c) 2012-2016 project_ntke_cpprtl
////    mailto:kt133a@seznam.cz
////    license: the MIT license
/////////////////////////////////////////////////////////////////////////////


#ifndef EH_ENGINE_DEFS_H_
#define EH_ENGINE_DEFS_H_


#include "eh_config.h"
#include <check_ct.h>


////////////////////////////////////////////////////////
////////  EH engine values
////////////////////////////////////////////////////////
namespace cpprtl
{
namespace eh
{
namespace eh_engine
{

  ////////////////////////////////////////////////////
  ////  ::EXCEPTION_RECORD -related stuff


  ////  exception opcodes for ExceptionCode=EXCEPTION_CODE_CPP residing at the ExceptionInformation[EXCPTR_OPCODE]
  enum
  {
    EXCEPTION_OPCODE_THROW               = 'ehop'
  , EXCEPTION_OPCODE_NO_EXC_OBJ
  , EXCEPTION_OPCODE_STACKWALKER_UNWIND
  , EXCEPTION_OPCODE_TARGET_UNWIND
  };


  //// exception flags residing at the ExceptionInformation[EXCPTR_FLAGS]
  enum
  {
    EXCEPTION_FLAG_TRANSLATED            = 1 << 0
  , EXCEPTION_FLAG_OBJECT_RETHROWED      = 1 << 1
  , EXCEPTION_FLAG_STACKWALKER_UNWIND    = 1 << 2
  };


  ////  ExceptionInformation common layout for exceptions generated by this lib
  enum 
  {
    EXCPTR_OPCODE          //  EXCEPTION_OPCODE_xxx
  , EXCPTR_FLAGS           //  EXCEPTION_FLAG_xxx
  , EXCPTR_COMMON_LAST     //  = the first of the specific array
  };


  ////  ExceptionInformation layout for opcode EXCEPTION_OPCODE_THROW
  enum 
  {
    EXCPTR_THR_THROWOBJECT     = EXCPTR_COMMON_LAST
  , EXCPTR_THR_THROWINFO
  , EXCPTR_THR_PREV_EXCEPTION
  , EXCPTR_THR_UNWIND_EXCREC    // the pointer to the eh-dispatching routine's c++-specific context (currently this to mean the unwind exception record)
  , ARRAYSIZE_EXCPTR_THROW
  };
  COMPILE_TIME_CHECK (ARRAYSIZE_EXCPTR_THROW <= EXCEPTION_MAXIMUM_PARAMETERS , EXCEPTION_MAXIMUM_PARAMETERS_EXCEEDED_THR)


  ////  ExceptionInformation layout for opcode EXCEPTION_OPCODE_TARGET_UNWIND
  enum
  {
    EXCPTR_TUW_CALLBACK_ADDR             = EXCPTR_COMMON_LAST  //  void (*)(EXCEPTION_RECORD*)
  , EXCPTR_TUW_EXCEPTION_REGISTRATION     //  exception_registration*
  , EXCPTR_TUW_EXCEPTION_RECORD           //  ::EXCEPTION_RECORD*
  , EXCPTR_TUW_CONTEXT_RECORD             //  void* (means ::CONTEXT*)
  , EXCPTR_TUW_DISPATCHER_CONTEXT         //  void*
  , EXCPTR_TUW_CATCH_HANDLER              //  catch_handler_ft
  , EXCPTR_TUW_TARGET_UNWIND_STATE        //  ehstate_t
  , EXCPTR_TUW_CATCH_BLOCK_LEVEL          //  ehstate_t
  , EXCPTR_TUW_FUNC_DESCRIPTOR            //  func_descriptor*
  , EXCPTR_TUW_CATCH_GUARD_REGISTRATION   //  exception_registration*
  , EXCPTR_TUW_CATCH_DEPTH                //  int
  , ARRAYSIZE_EXCPTR_TUW
  };
  COMPILE_TIME_CHECK (ARRAYSIZE_EXCPTR_TUW <= EXCEPTION_MAXIMUM_PARAMETERS , EXCEPTION_MAXIMUM_PARAMETERS_EXCEEDED_TUW)


  ////  ExceptionInformation layout for opcode EXCEPTION_OPCODE_NO_EXC_OBJ
  enum
  {
    EXCPTR_NOOBJ_EXCREC_PTR    = EXCPTR_COMMON_LAST
  , ARRAYSIZE_EXCPTR_NOOBJ
  };
  COMPILE_TIME_CHECK (ARRAYSIZE_EXCPTR_NOOBJ <= EXCEPTION_MAXIMUM_PARAMETERS , EXCEPTION_MAXIMUM_PARAMETERS_EXCEEDED_NOOBJ)

}  //  namespace eh_engine
}  //  namespace eh
}  //  namespace cpprtl


#endif // include guard

