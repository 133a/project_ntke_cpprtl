=====1===== contents of the project:

  .\ke_mode\winnt\ntke_cpprtl\cpprtl_test_kemode
    RTL test driver.


  .\ke_mode\winnt\ntke_cpprtl
    run-time library including eh & rtti & global/static ctoring/dtoring & new/delete.


  .\ke_mode\winnt\ntke_cpprtl\gstatic_test_suite
    global/static ctoring/dtoring test set.


  .\ke_mode\winnt\ntke_cpprtl\eh\frame_based
    x86 eh library.


  .\ke_mode\winnt\ntke_cpprtl\eh\table_based
    x64/arm eh library.


  .\ke_mode\winnt\ntke_cpprtl\eh\eh_test_suite
    ñ++ eh test set.


  .\ke_mode\winnt\ntke_cpprtl\rtti
    rtti library.


  .\ke_mode\winnt\ntke_cpprtl\rtti\rtti_test_suite
    rtti test set.


  .\ke_mode\winnt\ntke_cpprtl\std_incl
    RTL std-headers.


  .\ke_mode\winnt\ntke_cpprtl\stl_test_suite
    STL test set.


  .\ke_mode\winnt\tools\bin\$(ARCH)\lkm_loader.exe
    non-pnp driver loader, requires administrative privileges.


  .\make\ddk_build\cpprtl_test.sys.project
    cpprtl_test.sys project to be built by WDK.


  .\make\gmake
    GNU make build scripts.


  .\make\gmake\bin\$(ARCH)\df.exe
    converts the cl.exe output into the GNU make-compatible dependencies files.
    this can be turned off by adding make.no_df=1 to the .\make\gmake\mak\main.mak.




=====2===== build environment:

---01 install the 'GNU make':

  run the .\gmake_install.cmd


---02 install any of the supported DDK/WDK:

  ddk2600
    by default "DDK2600_FOLDER=%SystemDrive%\WinDDK\2600"
    supports building for the target.kernel=[nt5.0|nt5.1]


  ddk3790sp1
    by default "DDK3790SP1_FOLDER=%SystemDrive%\WinDDK\3790.1830"
    supports building for the target.kernel=[nt5.1|nt5.2]


  wdk6.1sp1
    by default "WDK61SP1_FOLDER=%SystemDrive%\WinDDK\6001.18002"
    supports building for the target.kernel=[nt5.1|nt5.2|nt6.0]


  wdk7.1.0
    by default "WDK710_FOLDER=%SystemDrive%\WinDDK\7600.16385.1"
    supports building for the target.kernel=[nt5.1|nt5.2|nt6.0|nt6.1]


  wdk8.0
    by default "WINSDK_8.0_FOLDER=%PROGRAMS_FOLDER.X86%\Windows Kits\8.0"
    by default "MSVS2012_FOLDER=%PROGRAMS_FOLDER.X86%\msvs2012"
    supports building for the target.kernel=[nt6.0|nt6.1|nt6.2]


  wdk8.1
    by default "WINSDK_8.1_FOLDER=%PROGRAMS_FOLDER.X86%\Windows Kits\8.1"
    by default "MSVS2013_FOLDER=%PROGRAMS_FOLDER.X86%\msvs2013"
    supports building for the target.kernel=[nt6.1|nt6.2|nt6.3]


  wdk10
    by default "WINSDK_10_FOLDER=%PROGRAMS_FOLDER.X86%\Windows Kits\10.0"
    by default "MSVS2015_FOLDER=%PROGRAMS_FOLDER.X86%\msvs2015"
    supports building for the target.kernel=[nt6.1|nt6.2|nt6.3|nt10.0]


  in the case the DDK/WDK is installed to the folder being different than default one as pointed above it's necessary to set up the corresponding environment variable.



=====3===== how to build and run:

  start up a build script (ddk*.cmd or wdk*.cmd) from the folder .\ke_mode\winnt\ntke_cpprtl\cpprtl_test_kemode

  once the build completes the driver file 'cpprtl_test.sys' will be placed in the folder: 
  .\__output\cpprtl_test.sys\$(target.toolset)\$(target.profile)_$(target.arch)_$(target.kernel)
  , e.g. in the case of target.toolset=wdk7.1.0_x86-x64 target.profile=debug target.kernel=nt5.2 the driver is placed here:
  .\__output\cpprtl_test.sys\wdk7.1.0_x86-x64\debug_x64_nt5.2\cpprtl_test.sys
  
  the 'cpprtl_test.sys' - is a non-pnp legacy driver so it's to be started by scm or lkm_loader,
  Sysinternals DbgView can be used to get the driver output, and if the string "cpprtl_test.DriverEntry() finishes with ret 0" is in the output the RTL tests are passed.

  the driver digital signing is described here: .\ke_mode\winnt\ntke_cpprtl\cpprtl_test_kemode\sign\signing.txt


=====4===== END

